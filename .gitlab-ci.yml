stages:
  - test
  - build
  - deploy

lint:
  stage: test
  image: golangci/golangci-lint:v1.42
  script:
    - golangci-lint run -v -E golint -E gofmt -E goconst -E interfacer -E gocritic -E gocognit -E gocyclo

container-image:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA" .
    - docker tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA" $CI_REGISTRY_IMAGE
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"
    - docker push $CI_REGISTRY_IMAGE
  only:
    - master

.setup-ssh: &setup-ssh
  - eval $(ssh-agent -s) > /dev/null
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - mv $SSH_CONFIG ~/.ssh/config
  - chmod 600 ~/.ssh/config

.setup-tailscale: &setup-tailscale
  - curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/focal.gpg | apt-key add - > /dev/null
  - curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/focal.list | tee /etc/apt/sources.list.d/tailscale.list > /dev/null
  - apt-get update > /dev/null
  - apt-get install -y tailscale > /dev/null
  - |
    tailscaled --tun=userspace-networking --outbound-http-proxy-listen=localhost:1055 &> /dev/null &
    until tailscale up --authkey=${TAILSCALE_AUTHKEY} --hostname=gitlab-runner
    do
      sleep 0.1
    done

.setup-docker: &setup-docker
  - curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose &> /dev/null
  - chmod +x /usr/local/bin/docker-compose
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY &> /dev/null
  - docker pull "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"

production:
  stage: deploy
  image: ubuntu:focal
  variables:
    DOCKER_HOST: "ssh://${USER_AT_HOST}"
  before_script:
    - apt-get update > /dev/null && apt-get install -y curl gnupg openssh-client netcat docker.io > /dev/null
    - *setup-tailscale
    - *setup-ssh
    - *setup-docker
  script:
    - docker-compose up -d
  environment: production
  only:
    - master
